{"ast":null,"code":"const {\n  parseURL\n} = require('../util');\n\nconst Constants = require('../util/Constants');\n\nconst Video = require('./Video');\n\nconst Channel = require('./Channel');\n/** Represents a YouTube playlist */\n\n\nclass Playlist {\n  /**\n   * @param {YouTube} youtube The YouTube instance creating this\n   * @param {Object} data The data of the playlist\n   */\n  constructor(youtube, data) {\n    /**\n     * The YouTube instance that created this\n     * @type {YouTube}\n     */\n    this.youtube = youtube;\n    Object.defineProperty(this, 'youtube', {\n      enumerable: false\n    });\n    /**\n     * The type to filter search results\n     * @type {string}\n     */\n\n    this.type = 'playlist';\n    /**\n     * Videos in this playlist.  Available after calling {@link Playlist#getVideos}.\n     * @type {Array<Video>}\n     */\n\n    this.videos = [];\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if (!data) return;\n    this.raw = data;\n    /**\n     * The channel this playlist is in\n     * @type {Channel}\n     */\n\n    this.channel = new Channel(this.youtube, data);\n    /**\n     * This playlist's ID\n     * @type {string}\n     * @name Playlist#id\n     */\n\n    switch (data.kind) {\n      case Constants.KINDS.SearchResult:\n        if (data.id.kind === Constants.KINDS.Playlist) this.id = data.id.playlistId;else throw new Error('Attempted to make a playlist out of a non-playlist search result.');\n        break;\n\n      case Constants.KINDS.Playlist:\n        this.id = data.id;\n        break;\n\n      case Constants.KINDS.PlaylistItem:\n        if (data.snippet) this.id = data.snippet.playlistId;else throw new Error('Attempted to make a playlist out of a resource with no playlist data.');\n        return this;\n      // don't pull extra info from playlist item info\n\n      default:\n        throw new Error(`Unknown playlist kind: ${data.kind}.`);\n    }\n\n    if (data.snippet) {\n      /**\n       * This playlist's title\n       * @type {?string}\n       */\n      this.title = data.snippet.title;\n      /**\n       * This playlist's description\n       * @type {?string}\n       */\n\n      this.description = data.snippet.description;\n      /**\n       * The date/time this playlist was published\n       * @type {?Date}\n       */\n\n      this.publishedAt = new Date(data.snippet.publishedAt);\n      /**\n       * Thumbnails for this playlist\n       * @type {?Object.<string, Thumbnail>}\n       */\n\n      this.thumbnails = data.snippet.thumbnails;\n      /**\n       * Channel title of this playlist\n       * @type {?string}\n       */\n\n      this.channelTitle = data.snippet.channelTitle;\n      /**\n       * The language in this playlist's title and description\n       * @type {?string}\n       */\n\n      this.defaultLanguage = data.snippet.defaultLanguage;\n      /**\n       * Information about the playlist as specified in the `hl` parameter\n       * @type {?{title: string, description: string}}\n       */\n\n      this.localized = data.snippet.localized;\n    }\n\n    if (data.status) {\n      /**\n       * The privacy status of this video\n       * @type {string}\n       */\n      this.privacy = data.status.privacyStatus;\n    }\n\n    if (data.contentDetails) {\n      /**\n       * The total number of videos in this playlist\n       * @type {number}\n       */\n      this.length = data.contentDetails.itemCount;\n    }\n\n    if (data.player) {\n      /**\n       * A string with an iframe tag for embedding this playlist\n       * @type {string}\n       */\n      this.embedHTML = data.player.embedHtml;\n    }\n\n    return this;\n  }\n  /**\n   * The URL to this playlist\n   * @type {string}\n   */\n\n\n  get url() {\n    return `https://www.youtube.com/playlist?list=${this.id}`;\n  }\n  /**\n   * Fetch the full representation of this playlist.\n   * @param {object} [options] Any extra query params\n   * @returns {Playlist}\n   */\n\n\n  fetch(options) {\n    return this.youtube.request.getPlaylist(this.id, options).then(this._patch.bind(this));\n  }\n  /**\n   * Gets videos in the playlist\n   * @param {Number} [limit] Maximum number of videos to obtain.  Fetches all if not provided.\n   * @param {Object} [options] Options to retrieve for each video.\n   * @returns {Promise<Video[]>}\n   */\n\n\n  getVideos(limit, options) {\n    return this.youtube.request.getPaginated(Constants.ENDPOINTS.PlaylistItems, limit, Object.assign({\n      playlistId: this.id,\n      part: Constants.PARTS.PlaylistItems\n    }, options)).then(items => this.videos = items.map(i => new Video(this.youtube, i)));\n  }\n  /**\n   * Get a playlist ID from a string (URL or ID)\n   * @param {string} url The string to get the ID from\n   * @returns {?string}\n   */\n\n\n  static extractID(url) {\n    return parseURL(url).playlist;\n  }\n\n}\n\nmodule.exports = Playlist;","map":{"version":3,"sources":["E:/MoodyPlayer/client/node_modules/simple-youtube-api/src/structures/Playlist.js"],"names":["parseURL","require","Constants","Video","Channel","Playlist","constructor","youtube","data","Object","defineProperty","enumerable","type","videos","_patch","raw","channel","kind","KINDS","SearchResult","id","playlistId","Error","PlaylistItem","snippet","title","description","publishedAt","Date","thumbnails","channelTitle","defaultLanguage","localized","status","privacy","privacyStatus","contentDetails","length","itemCount","player","embedHTML","embedHtml","url","fetch","options","request","getPlaylist","then","bind","getVideos","limit","getPaginated","ENDPOINTS","PlaylistItems","assign","part","PARTS","items","map","i","extractID","playlist","module","exports"],"mappings":"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","sourcesContent":["const { parseURL } = require('../util');\nconst Constants = require('../util/Constants');\nconst Video = require('./Video');\nconst Channel = require('./Channel');\n\n/** Represents a YouTube playlist */\nclass Playlist {\n    /**\n     * @param {YouTube} youtube The YouTube instance creating this\n     * @param {Object} data The data of the playlist\n     */\n    constructor(youtube, data) {\n        /**\n         * The YouTube instance that created this\n         * @type {YouTube}\n         */\n        this.youtube = youtube;\n        Object.defineProperty(this, 'youtube', { enumerable: false });\n\n        /**\n         * The type to filter search results\n         * @type {string}\n         */\n        this.type = 'playlist';\n\n        /**\n         * Videos in this playlist.  Available after calling {@link Playlist#getVideos}.\n         * @type {Array<Video>}\n         */\n        this.videos = [];\n\n        this._patch(data);\n    }\n\n    _patch(data) {\n        if (!data) return;\n\n        this.raw = data;\n\n        /**\n         * The channel this playlist is in\n         * @type {Channel}\n         */\n        this.channel = new Channel(this.youtube, data);\n\n        /**\n         * This playlist's ID\n         * @type {string}\n         * @name Playlist#id\n         */\n\n        switch (data.kind) {\n            case Constants.KINDS.SearchResult:\n                if (data.id.kind === Constants.KINDS.Playlist) this.id = data.id.playlistId;\n                else throw new Error('Attempted to make a playlist out of a non-playlist search result.');\n                break;\n            case Constants.KINDS.Playlist:\n                this.id = data.id;\n                break;\n            case Constants.KINDS.PlaylistItem:\n                if (data.snippet) this.id = data.snippet.playlistId;\n                else throw new Error('Attempted to make a playlist out of a resource with no playlist data.');\n                return this; // don't pull extra info from playlist item info\n            default:\n                throw new Error(`Unknown playlist kind: ${data.kind}.`);\n        }\n\n        if (data.snippet) {\n            /**\n             * This playlist's title\n             * @type {?string}\n             */\n            this.title = data.snippet.title;\n\n            /**\n             * This playlist's description\n             * @type {?string}\n             */\n            this.description = data.snippet.description;\n\n            /**\n             * The date/time this playlist was published\n             * @type {?Date}\n             */\n            this.publishedAt = new Date(data.snippet.publishedAt);\n\n            /**\n             * Thumbnails for this playlist\n             * @type {?Object.<string, Thumbnail>}\n             */\n            this.thumbnails = data.snippet.thumbnails;\n\n            /**\n             * Channel title of this playlist\n             * @type {?string}\n             */\n            this.channelTitle = data.snippet.channelTitle;\n\n            /**\n             * The language in this playlist's title and description\n             * @type {?string}\n             */\n            this.defaultLanguage = data.snippet.defaultLanguage;\n\n            /**\n             * Information about the playlist as specified in the `hl` parameter\n             * @type {?{title: string, description: string}}\n             */\n            this.localized = data.snippet.localized;\n        }\n\n        if (data.status) {\n            /**\n             * The privacy status of this video\n             * @type {string}\n             */\n            this.privacy = data.status.privacyStatus;\n        }\n\n        if (data.contentDetails) {\n            /**\n             * The total number of videos in this playlist\n             * @type {number}\n             */\n            this.length = data.contentDetails.itemCount;\n        }\n\n        if (data.player) {\n            /**\n             * A string with an iframe tag for embedding this playlist\n             * @type {string}\n             */\n            this.embedHTML = data.player.embedHtml;\n        }\n\n        return this;\n    }\n\n    /**\n     * The URL to this playlist\n     * @type {string}\n     */\n    get url() {\n        return `https://www.youtube.com/playlist?list=${this.id}`;\n    }\n\n    /**\n     * Fetch the full representation of this playlist.\n     * @param {object} [options] Any extra query params\n     * @returns {Playlist}\n     */\n    fetch(options) {\n        return this.youtube.request.getPlaylist(this.id, options).then(this._patch.bind(this));\n    }\n\n    /**\n     * Gets videos in the playlist\n     * @param {Number} [limit] Maximum number of videos to obtain.  Fetches all if not provided.\n     * @param {Object} [options] Options to retrieve for each video.\n     * @returns {Promise<Video[]>}\n     */\n    getVideos(limit, options) {\n        return this.youtube.request.getPaginated(\n            Constants.ENDPOINTS.PlaylistItems,\n            limit,\n            Object.assign({ playlistId: this.id, part: Constants.PARTS.PlaylistItems }, options)\n        ).then(items => this.videos = items.map(i => new Video(this.youtube, i)));\n    }\n\n    /**\n     * Get a playlist ID from a string (URL or ID)\n     * @param {string} url The string to get the ID from\n     * @returns {?string}\n     */\n    static extractID(url) {\n        return parseURL(url).playlist;\n    }\n}\n\nmodule.exports = Playlist;\n"]},"metadata":{},"sourceType":"script"}