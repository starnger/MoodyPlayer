{"ast":null,"code":"const {\n  parse\n} = require('url');\n/**\n * Parse a string as a potential YouTube resource URL.\n * @param {string} url\n * @returns {{video: ?string, channel: ?string, playlist: ?string}}\n */\n\n\nexports.parseURL = url => {\n  const parsed = parse(url, true);\n\n  switch (parsed.hostname) {\n    case 'www.youtube.com':\n    case 'youtube.com':\n    case 'm.youtube.com':\n    case 'music.youtube.com':\n      {\n        const idRegex = /^[a-zA-Z0-9-_]+$/;\n\n        if (parsed.pathname === '/watch') {\n          if (!idRegex.test(parsed.query.v)) return {};\n          const response = {\n            video: parsed.query.v\n          };\n          if (parsed.query.list) response.playlist = parsed.query.list;\n          return response;\n        } else if (parsed.pathname === '/playlist') {\n          if (!idRegex.test(parsed.query.list)) return {};\n          return {\n            playlist: parsed.query.list\n          };\n        } else if (parsed.pathname.startsWith('/channel/')) {\n          const id = parsed.pathname.replace('/channel/', '');\n          if (!idRegex.test(id)) return {};\n          return {\n            channel: id\n          };\n        } else if (parsed.pathname.startsWith('/browse/')) {\n          const id = parsed.pathname.replace('/browse/', '');\n          if (!idRegex.test(id)) return {};\n          return {\n            channel: id\n          };\n        }\n\n        return {};\n      }\n\n    case 'youtu.be':\n      return {\n        video: /^\\/[a-zA-Z0-9-_]+$/.test(parsed.pathname) ? parsed.pathname.slice(1) : null\n      };\n\n    default:\n      return {};\n  }\n};","map":{"version":3,"sources":["E:/sangit-a-musicapp/client/node_modules/simple-youtube-api/src/util/index.js"],"names":["parse","require","exports","parseURL","url","parsed","hostname","idRegex","pathname","test","query","v","response","video","list","playlist","startsWith","id","replace","channel","slice"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,KAAD,CAAzB;AAEA;;;;;;;AAKAC,OAAO,CAACC,QAAR,GAAoBC,GAAD,IAAS;AACxB,QAAMC,MAAM,GAAGL,KAAK,CAACI,GAAD,EAAM,IAAN,CAApB;;AACA,UAAQC,MAAM,CAACC,QAAf;AACI,SAAK,iBAAL;AACA,SAAK,aAAL;AACA,SAAK,eAAL;AACA,SAAK,mBAAL;AAA0B;AACtB,cAAMC,OAAO,GAAG,kBAAhB;;AACA,YAAIF,MAAM,CAACG,QAAP,KAAoB,QAAxB,EAAkC;AAC9B,cAAI,CAACD,OAAO,CAACE,IAAR,CAAaJ,MAAM,CAACK,KAAP,CAAaC,CAA1B,CAAL,EAAmC,OAAO,EAAP;AACnC,gBAAMC,QAAQ,GAAG;AAAEC,YAAAA,KAAK,EAAER,MAAM,CAACK,KAAP,CAAaC;AAAtB,WAAjB;AACA,cAAIN,MAAM,CAACK,KAAP,CAAaI,IAAjB,EAAuBF,QAAQ,CAACG,QAAT,GAAoBV,MAAM,CAACK,KAAP,CAAaI,IAAjC;AACvB,iBAAOF,QAAP;AACH,SALD,MAKO,IAAIP,MAAM,CAACG,QAAP,KAAoB,WAAxB,EAAqC;AACxC,cAAG,CAACD,OAAO,CAACE,IAAR,CAAaJ,MAAM,CAACK,KAAP,CAAaI,IAA1B,CAAJ,EAAqC,OAAO,EAAP;AACrC,iBAAO;AAAEC,YAAAA,QAAQ,EAAEV,MAAM,CAACK,KAAP,CAAaI;AAAzB,WAAP;AACH,SAHM,MAGA,IAAIT,MAAM,CAACG,QAAP,CAAgBQ,UAAhB,CAA2B,WAA3B,CAAJ,EAA6C;AAChD,gBAAMC,EAAE,GAAGZ,MAAM,CAACG,QAAP,CAAgBU,OAAhB,CAAwB,WAAxB,EAAqC,EAArC,CAAX;AACA,cAAI,CAACX,OAAO,CAACE,IAAR,CAAaQ,EAAb,CAAL,EAAuB,OAAO,EAAP;AACvB,iBAAO;AAAEE,YAAAA,OAAO,EAAEF;AAAX,WAAP;AACH,SAJM,MAIA,IAAIZ,MAAM,CAACG,QAAP,CAAgBQ,UAAhB,CAA2B,UAA3B,CAAJ,EAA4C;AAC/C,gBAAMC,EAAE,GAAGZ,MAAM,CAACG,QAAP,CAAgBU,OAAhB,CAAwB,UAAxB,EAAoC,EAApC,CAAX;AACA,cAAI,CAACX,OAAO,CAACE,IAAR,CAAaQ,EAAb,CAAL,EAAuB,OAAO,EAAP;AACvB,iBAAO;AAAEE,YAAAA,OAAO,EAAEF;AAAX,WAAP;AACH;;AAED,eAAO,EAAP;AACH;;AACD,SAAK,UAAL;AACI,aAAO;AAAEJ,QAAAA,KAAK,EAAE,qBAAqBJ,IAArB,CAA0BJ,MAAM,CAACG,QAAjC,IAA6CH,MAAM,CAACG,QAAP,CAAgBY,KAAhB,CAAsB,CAAtB,CAA7C,GAAwE;AAAjF,OAAP;;AACJ;AACI,aAAO,EAAP;AA7BR;AA+BH,CAjCD","sourcesContent":["const { parse } = require('url');\n\n/**\n * Parse a string as a potential YouTube resource URL.\n * @param {string} url\n * @returns {{video: ?string, channel: ?string, playlist: ?string}}\n */\nexports.parseURL = (url) => {\n    const parsed = parse(url, true);\n    switch (parsed.hostname) {\n        case 'www.youtube.com':\n        case 'youtube.com':\n        case 'm.youtube.com':\n        case 'music.youtube.com': {\n            const idRegex = /^[a-zA-Z0-9-_]+$/;\n            if (parsed.pathname === '/watch') {\n                if (!idRegex.test(parsed.query.v)) return {};\n                const response = { video: parsed.query.v };\n                if (parsed.query.list) response.playlist = parsed.query.list;\n                return response;\n            } else if (parsed.pathname === '/playlist') {\n                if(!idRegex.test(parsed.query.list)) return {};\n                return { playlist: parsed.query.list };\n            } else if (parsed.pathname.startsWith('/channel/')) {\n                const id = parsed.pathname.replace('/channel/', '');\n                if (!idRegex.test(id)) return {};\n                return { channel: id };\n            } else if (parsed.pathname.startsWith('/browse/')) {\n                const id = parsed.pathname.replace('/browse/', '');\n                if (!idRegex.test(id)) return {};\n                return { channel: id };\n            }\n\n            return {};\n        }\n        case 'youtu.be':\n            return { video: /^\\/[a-zA-Z0-9-_]+$/.test(parsed.pathname) ? parsed.pathname.slice(1) : null };\n        default:\n            return {};\n    }\n};\n"]},"metadata":{},"sourceType":"script"}